Expansion is a Python script that implements a syntax for expressing lists of
strings, and a generator to create those strings. It was inspired by the syntax
curl uses to expand lists of URLs, but could be applied to other things.
Although it is not as expressive as regular expressions, it has the benefit that
it will not allow one to generate infinitely expanding expressions.

An example expression might be 'foo/{bar,baz}/[1,3]/(1)', which would expand to
the following list of four strings.
foo/bar/1/bar
foo/bar/2/bar
foo/baz/1/baz
foo/baz/2/baz

The language itself is composed of strings, references, and sequences. Sequences
may further be categorized into numerical ranges and lists.

Strings:
Strings are treated as atomic units. Non-special characters in a given context
will be treated as part of strings by default, but if you wish for a special
character to be treated as a string in a list or at the top level, you can use
double quoted strings. Backslash will also act as an escape character in lists,
strings, or at the top level.

Ranges:
Ranges provide a way of expressing numerical sequences. These are expressed as
[start:stop] or [start:stop:step], where start, stop, and step are numbers. Step
will default to 1 if not specified. Additionally, the start and stop values will
be interpreted in an attempt to replicate any zero padding for the sequence.

Example - Simple range
[8:12]
Expands to
8
9
10
11
12

Example - Zero padded range
[08:12]
Expands to
08
09
10
11
12

Example - Zero prefixed range
[08:012]
Expands to
08
09
010
011
012

Example - Range with step value
[0:10:3]
Expands to
0
3
6
9

Lists:
Lists are composed of strings and ranges, delimited by commas, and surrounded by
curly braces. They expand to each of the items in turn, and in the case of
embedded ranges, will expand each of the embedded range's strings before moving
on to the next list element. Lists may not be embedded inside other lists.

Example - Simple list:
{foo,bar,baz}
Expands to:
foo
bar
baz

Example - List with embedded range
{foo,[1:6:2]}
Expands to:
foo
1
3
5

References:
References are treated as atomic units with values that match the current value
of the top level sequence they reference. They are written as a single positive
integer enclosed in parentheses, and may not be embedded inside lists, nor
reference ranges embedded in lists.

Example
{foo,bar}.(1)
Expands to
foo.foo
bar.bar
